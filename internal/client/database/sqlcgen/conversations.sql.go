// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: conversations.sql

package sqlcgen

import (
	"context"
)

const getConversation = `-- name: GetConversation :one
SELECT id, local_user_name, remote_user_name FROM conversations WHERE local_user_name = ? AND remote_user_name = ?
`

type GetConversationParams struct {
	LocalUserName  string
	RemoteUserName string
}

func (q *Queries) GetConversation(ctx context.Context, arg GetConversationParams) (*Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversation, arg.LocalUserName, arg.RemoteUserName)
	var i Conversation
	err := row.Scan(&i.ID, &i.LocalUserName, &i.RemoteUserName)
	return &i, err
}

const insertConversation = `-- name: InsertConversation :one
INSERT INTO conversations (local_user_name, remote_user_name) VALUES (?, ?) RETURNING id, local_user_name, remote_user_name
`

type InsertConversationParams struct {
	LocalUserName  string
	RemoteUserName string
}

func (q *Queries) InsertConversation(ctx context.Context, arg InsertConversationParams) (*Conversation, error) {
	row := q.db.QueryRowContext(ctx, insertConversation, arg.LocalUserName, arg.RemoteUserName)
	var i Conversation
	err := row.Scan(&i.ID, &i.LocalUserName, &i.RemoteUserName)
	return &i, err
}

const listConversations = `-- name: ListConversations :many
SELECT id, local_user_name, remote_user_name FROM conversations WHERE local_user_name = ?
`

func (q *Queries) ListConversations(ctx context.Context, localUserName string) ([]*Conversation, error) {
	rows, err := q.db.QueryContext(ctx, listConversations, localUserName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Conversation
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(&i.ID, &i.LocalUserName, &i.RemoteUserName); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
