// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: public_users.sql

package sqlcgen

import (
	"context"
)

const getPublicUserByName = `-- name: GetPublicUserByName :one
SELECT name, public_key FROM public_users WHERE name = ?
`

func (q *Queries) GetPublicUserByName(ctx context.Context, name string) (*PublicUser, error) {
	row := q.db.QueryRowContext(ctx, getPublicUserByName, name)
	var i PublicUser
	err := row.Scan(&i.Name, &i.PublicKey)
	return &i, err
}

const insertPublicUser = `-- name: InsertPublicUser :one
INSERT INTO public_users (name, public_key) VALUES (?, ?) RETURNING name, public_key
`

type InsertPublicUserParams struct {
	Name      string
	PublicKey []byte
}

func (q *Queries) InsertPublicUser(ctx context.Context, arg InsertPublicUserParams) (*PublicUser, error) {
	row := q.db.QueryRowContext(ctx, insertPublicUser, arg.Name, arg.PublicKey)
	var i PublicUser
	err := row.Scan(&i.Name, &i.PublicKey)
	return &i, err
}

const listPublicUsers = `-- name: ListPublicUsers :many
SELECT name, public_key FROM public_users
`

func (q *Queries) ListPublicUsers(ctx context.Context) ([]*PublicUser, error) {
	rows, err := q.db.QueryContext(ctx, listPublicUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PublicUser
	for rows.Next() {
		var i PublicUser
		if err := rows.Scan(&i.Name, &i.PublicKey); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
