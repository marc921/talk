// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: messages.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const insertMessage = `-- name: InsertMessage :one
INSERT INTO messages (
	conversation_id,
	sender,
	receiver,
	content
) VALUES (?, ?, ?, ?) RETURNING id, conversation_id, sender, receiver, content, sent_at, delivered_at, read_at
`

type InsertMessageParams struct {
	ConversationID int64
	Sender         string
	Receiver       string
	Content        []byte
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) (*Message, error) {
	row := q.db.QueryRowContext(ctx, insertMessage,
		arg.ConversationID,
		arg.Sender,
		arg.Receiver,
		arg.Content,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Sender,
		&i.Receiver,
		&i.Content,
		&i.SentAt,
		&i.DeliveredAt,
		&i.ReadAt,
	)
	return &i, err
}

const listMessages = `-- name: ListMessages :many
SELECT id, conversation_id, sender, receiver, content, sent_at, delivered_at, read_at FROM messages WHERE conversation_id = ?
`

func (q *Queries) ListMessages(ctx context.Context, conversationID int64) ([]*Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessages, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.Sender,
			&i.Receiver,
			&i.Content,
			&i.SentAt,
			&i.DeliveredAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markMessageDelivered = `-- name: MarkMessageDelivered :one
UPDATE messages SET delivered_at = ? WHERE id = ? RETURNING id, conversation_id, sender, receiver, content, sent_at, delivered_at, read_at
`

type MarkMessageDeliveredParams struct {
	DeliveredAt sql.NullTime
	ID          int64
}

func (q *Queries) MarkMessageDelivered(ctx context.Context, arg MarkMessageDeliveredParams) (*Message, error) {
	row := q.db.QueryRowContext(ctx, markMessageDelivered, arg.DeliveredAt, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Sender,
		&i.Receiver,
		&i.Content,
		&i.SentAt,
		&i.DeliveredAt,
		&i.ReadAt,
	)
	return &i, err
}

const markMessageRead = `-- name: MarkMessageRead :one
UPDATE messages SET read_at = ? WHERE id = ? RETURNING id, conversation_id, sender, receiver, content, sent_at, delivered_at, read_at
`

type MarkMessageReadParams struct {
	ReadAt sql.NullTime
	ID     int64
}

func (q *Queries) MarkMessageRead(ctx context.Context, arg MarkMessageReadParams) (*Message, error) {
	row := q.db.QueryRowContext(ctx, markMessageRead, arg.ReadAt, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Sender,
		&i.Receiver,
		&i.Content,
		&i.SentAt,
		&i.DeliveredAt,
		&i.ReadAt,
	)
	return &i, err
}

const markMessageSent = `-- name: MarkMessageSent :one
UPDATE messages SET sent_at = ? WHERE id = ? RETURNING id, conversation_id, sender, receiver, content, sent_at, delivered_at, read_at
`

type MarkMessageSentParams struct {
	SentAt sql.NullTime
	ID     int64
}

func (q *Queries) MarkMessageSent(ctx context.Context, arg MarkMessageSentParams) (*Message, error) {
	row := q.db.QueryRowContext(ctx, markMessageSent, arg.SentAt, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Sender,
		&i.Receiver,
		&i.Content,
		&i.SentAt,
		&i.DeliveredAt,
		&i.ReadAt,
	)
	return &i, err
}
