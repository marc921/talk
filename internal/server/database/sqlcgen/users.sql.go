// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const getUser = `-- name: GetUser :one
SELECT name, public_key, created_at, updated_at FROM users WHERE name = ?
`

func (q *Queries) GetUser(ctx context.Context, name string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUser, name)
	var i User
	err := row.Scan(
		&i.Name,
		&i.PublicKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (name, public_key) 
VALUES (?, ?)
ON CONFLICT(name) DO UPDATE SET
    updated_at = updated_at
RETURNING name, public_key, created_at, updated_at, 
    changes() = 1
`

type InsertUserParams struct {
	Name      string
	PublicKey []byte
}

type InsertUserRow struct {
	Column1   bool
	Name      string
	PublicKey []byte
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (*InsertUserRow, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.Name, arg.PublicKey)
	var i InsertUserRow
	err := row.Scan(
		&i.Column1,
		&i.Name,
		&i.PublicKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT name, public_key, created_at, updated_at FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Name,
			&i.PublicKey,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
