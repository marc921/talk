// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: messages.sql

package sqlcgen

import (
	"context"
)

const getUndeliveredMessages = `-- name: GetUndeliveredMessages :many
SELECT id, sender, recipient, cipher_sym_key, ciphertext, sent_at, delivered_at, read_at FROM messages
WHERE
	recipient = ? AND
	delivered_at IS NULL
`

func (q *Queries) GetUndeliveredMessages(ctx context.Context, recipient string) ([]*Message, error) {
	rows, err := q.db.QueryContext(ctx, getUndeliveredMessages, recipient)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.Recipient,
			&i.CipherSymKey,
			&i.Ciphertext,
			&i.SentAt,
			&i.DeliveredAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO messages (sender, recipient, cipher_sym_key, ciphertext, sent_at)
VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
RETURNING id, sender, recipient, cipher_sym_key, ciphertext, sent_at, delivered_at, read_at
`

type InsertMessageParams struct {
	Sender       string
	Recipient    string
	CipherSymKey []byte
	Ciphertext   []byte
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) (*Message, error) {
	row := q.db.QueryRowContext(ctx, insertMessage,
		arg.Sender,
		arg.Recipient,
		arg.CipherSymKey,
		arg.Ciphertext,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.Recipient,
		&i.CipherSymKey,
		&i.Ciphertext,
		&i.SentAt,
		&i.DeliveredAt,
		&i.ReadAt,
	)
	return &i, err
}

const setMessageDelivered = `-- name: SetMessageDelivered :exec
UPDATE messages SET delivered_at = CURRENT_TIMESTAMP WHERE id = ?
`

func (q *Queries) SetMessageDelivered(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, setMessageDelivered, id)
	return err
}

const setMessageRead = `-- name: SetMessageRead :exec
UPDATE messages SET read_at = CURRENT_TIMESTAMP WHERE id = ?
`

func (q *Queries) SetMessageRead(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, setMessageRead, id)
	return err
}

const setMessageSent = `-- name: SetMessageSent :exec
UPDATE messages SET sent_at = CURRENT_TIMESTAMP WHERE id = ?
`

func (q *Queries) SetMessageSent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, setMessageSent, id)
	return err
}
